datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "windows"]
}

model UserData {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  provider_id   String?       @unique
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  pronouns      String?
  profile       Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  firstName         String
  lastName          String
  bio               String
  headline          String
  location          String
  websiteURL        String
  shareQuick       String?
  yogaStyle         String?
  yogaExperience    String?
  company           String?
  socialURL         String?
  isLocationPublic  String?
  role              String?

  // emailPublic       String
  // emailInternal     String
  // emailAlternate    String
  // phoneContact      String
  // Facebook          String
  // Google            String
  // Patreon           String
  // Twitch            String
  // Twitter           String
  // blogURL           String
  // streamingURL      String
  // isInstructor      String
  // isStudent         String
  // isPrivate         String
  // calendar          String
  // timezone          String
  // exportAccountInfo String
  // deleteAccountInfo String
  providerAccounts      ProviderAccount[]
  asanaActivities AsanaActivity[] // Relation to AsanaActivity
  seriesActivities SeriesActivity[] // Relation to SeriesActivity
  userLogins      UserLogin[] // Relation to UserLogin
  poseImages      PoseImage[] // Relation to PoseImage
}

model ProviderAccount {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     Json?
  credentials_password       String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([provider, providerAccountId])
}

/// Represents a yoga Asana in the app.
model AsanaPosture {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  english_names            String [] 
  sanskrit_names  Json?
  sort_english_name   String @unique
  description     String?
  benefits        String?
  category        String?
  difficulty      String?
  lore            String?
  breath_direction_default String?
  dristi            String?
  variations      String[]
  modifications   String[]
  suggested_postures    String[]
  preparatory_postures    String[]
  preferred_side  String?
  sideways       Boolean?
  image           String?
  created_on       DateTime? @default(now())
  updated_on       DateTime? @updatedAt
  acitivity_completed Boolean?
  acitivity_practice  Boolean?
  posture_intent    String?
  breath_series           String[]
  duration_asana         String?
  transition_cues_out   String?
  transition_cues_in    String?
  setup_cues           String?
  deepening_cues       String?
  customize_asana      String?
  additional_cues      String?
  joint_action         String?
  muscle_action        String?
  created_by          String?
  asanaActivities AsanaActivity[] // Relation to AsanaActivity
  poseImages      PoseImage[]     // Relation to PoseImage
}

model AsanaSeries {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  seriesName    String
  seriesPostures  String[]
  // breath           String?
  // breath specified for the series
  breathSeries           String[]
  description     String?
  durationSeries        String?
  image           String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model AsanaSequence {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  nameSequence    String
  sequencesSeries   Json[]
  description     String?
  durationSequence        String?
  image           String?
  breath_direction           String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

/// Records a user's daily asana activity.
model AsanaActivity {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  postureId     String   // Reference to AsanaPosture.id
  postureName   String   // e.g., Adho Mukha Svanasana
  sort_english_name String // For routing - e.g., "Downward Facing Dog"
  duration      Int      // Duration held (in seconds)
  datePerformed DateTime // Date performed
  notes         String?  // User notes (optional)
  sensations    String?  // Body sensations or mood (optional)
  completionStatus String // e.g., "complete", "skipped", "partial"
  difficulty    String?  // User-selected difficulty: "easy", "average", "difficult"

  user          UserData @relation(fields: [userId], references: [id], onDelete: Cascade)
  posture       AsanaPosture @relation(fields: [postureId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

/// Records a user's series practice activity.
model SeriesActivity {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  seriesId      String   // Reference to AsanaSeries.id
  seriesName    String   // e.g., "Sun Salutation A"
  datePerformed DateTime // Date performed
  difficulty    String?  // User-selected difficulty: "easy", "average", "difficult"
  completionStatus String @default("complete") // e.g., "complete", "skipped", "partial"
  duration      Int      @default(0) // Duration in seconds
  notes         String?  // User notes (optional)

  user          UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

/// Records user login events for activity streak calculation.
model UserLogin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  loginDate DateTime @default(now())
  ipAddress String?  // Optional for analytics
  userAgent String?  // Optional for analytics
  provider  String?  // e.g., "google", "github", "credentials"

  user      UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId, loginDate])
}

/// Records user-uploaded images of yoga poses.
model PoseImage {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @db.ObjectId
  postureId      String?     @db.ObjectId // Optional association with a specific posture
  postureName    String?     // Store the sort_english_name for easier querying
  url            String      // Image URL (Cloudflare or local reference)
  altText        String?     // Alternative text for accessibility
  fileName       String?     // Original filename
  fileSize       Int?        // File size in bytes
  uploadedAt     DateTime    @default(now())
  storageType    StorageType @default(CLOUD) // Where the image is stored
  localStorageId String?     // Local storage identifier for browser storage
  cloudflareId   String?     // Cloudflare image ID for cloud images
  isOffline      Boolean     @default(false) // True if saved offline due to API failure
  
  user       UserData      @relation(fields: [userId], references: [id], onDelete: Cascade)
  posture    AsanaPosture? @relation(fields: [postureId], references: [id], onDelete: SetNull)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([userId])
  @@index([postureId])
  @@index([postureName])
  @@index([storageType])
}

/// Enum for image storage types
enum StorageType {
  CLOUD    // Stored in Cloudflare Images
  LOCAL    // Stored locally in browser storage
  HYBRID   // Has both cloud and local copies
}
