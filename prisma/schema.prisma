datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI_v2")
}

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "windows"]
}

model UserData {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  provider_id   String?       @unique
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  pronouns      String?
  profile       Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  firstName         String
  lastName          String
  bio               String
  headline          String
  location          String
  websiteURL        String
  shareQuick       String?
  yogaStyle         String?
  yogaExperience    String?
  company           String?
  socialURL         String?
  isLocationPublic  String?
  role              String?

  // emailPublic       String
  // emailInternal     String
  // emailAlternate    String
  // phoneContact      String
  // Facebook          String
  // Google            String
  // Patreon           String
  // Twitch            String
  // Twitter           String
  // blogURL           String
  // streamingURL      String
  // isInstructor      String
  // isStudent         String
  // isPrivate         String
  // calendar          String
  // timezone          String
  // exportAccountInfo String
  // deleteAccountInfo String
  providerAccounts      ProviderAccount[]
  asanaActivities AsanaActivity[] // Relation to AsanaActivity
}

model ProviderAccount {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     Json?
  credentials_password       String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([provider, providerAccountId])
}

/// Represents a yoga Asana in the app.
model AsanaPosture {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  english_names            String [] 
  sanskrit_names  Json?
  sort_english_name   String @unique
  description     String?
  benefits        String?
  category        String?
  difficulty      String?
  lore            String?
  breath_direction_default String?
  dristi            String?
  variations      String[]
  modifications   String[]
  suggested_postures    String[]
  preparatory_postures    String[]
  preferred_side  String?
  sideways       Boolean?
  image           String?
  created_on       DateTime? @default(now())
  updated_on       DateTime? @updatedAt
  acitivity_completed Boolean?
  acitivity_practice  Boolean?
  posture_intent    String?
  breath_series           String[]
  duration_asana         String?
  transition_cues_out   String?
  transition_cues_in    String?
  setup_cues           String?
  deepening_cues       String?
  customize_asana      String?
  additional_cues      String?
  joint_action         String?
  muscle_action        String?
  created_by          String?
  asanaActivities AsanaActivity[] // Relation to AsanaActivity
}

model AsanaSeries {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  seriesName    String
  seriesPostures  String[]
  // breath           String?
  // breath specified for the series
  breathSeries           String[]
  description     String?
  durationSeries        String?
  image           String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model AsanaSequence {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  nameSequence    String
  sequencesSeries   Json[]
  description     String?
  durationSequence        String?
  image           String?
  breath_direction           String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

/// Records a user's daily asana activity.
model AsanaActivity {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  postureId     String   // Reference to AsanaPosture.id
  postureName   String   // e.g., Adho Mukha Svanasana
  duration      Int      // Duration held (in seconds)
  datePerformed DateTime // Date performed
  notes         String?  // User notes (optional)
  sensations    String?  // Body sensations or mood (optional)
  completionStatus String // e.g., "complete", "skipped", "partial"

  user          UserData @relation(fields: [userId], references: [id], onDelete: Cascade)
  posture       AsanaPosture @relation(fields: [postureId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
