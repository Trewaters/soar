datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "windows"]
}

model UserData {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  provider_id      String?   @unique
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  pronouns         String?
  profile          Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  firstName        String
  lastName         String
  bio              String
  headline         String
  location         String
  websiteURL       String
  shareQuick       String?
  yogaStyle        String?
  yogaExperience   String?
  company          String?
  socialURL        String?
  isLocationPublic String?
  role             String?

  // emailPublic       String
  // emailInternal     String
  // emailAlternate    String
  // phoneContact      String
  // Facebook          String
  // Google            String
  // Patreon           String
  // Twitch            String
  // Twitter           String
  // blogURL           String
  // streamingURL      String
  // isInstructor      String
  // isStudent         String
  // isPrivate         String
  // calendar          String
  // timezone          String
  // exportAccountInfo String
  // deleteAccountInfo String
  providerAccounts   ProviderAccount[]
  asanaActivities    AsanaActivity[] // Relation to AsanaActivity
  seriesActivities   SeriesActivity[] // Relation to SeriesActivity
  sequenceActivities SequenceActivity[] // Relation to SequenceActivity
  userLogins         UserLogin[] // Relation to UserLogin
  poseImages         PoseImage[] // Relation to PoseImage
  glossaryTerms      GlossaryTerm[] // User-created glossary terms

  /// Profile image management fields
  profileImages      String[]           @db.String // Array of image URLs or IDs, max 3 enforced in backend
  activeProfileImage String? // URL or ID of the active profile image
  tz                 String             @default("America/Los_Angeles") // store IANA TZ
  reminders          Reminder[]
  pushSubscriptions  PushSubscription[]
}

model Reminder {
  id                        String    @id @default(cuid()) @map("_id")
  userId                    String    @db.ObjectId
  user                      UserData  @relation(fields: [userId], references: [id], onDelete: Cascade)
  // store preferred local times; one or many
  timeOfDay                 String // "07:30" 24h format
  days                      String[] // ["Mon","Tue","Wed","Thu","Fri"] or ["Sun",...]
  enabled                   Boolean   @default(true)
  message                   String    @default("üßò Practice time")
  lastSent                  DateTime? // to avoid double-sends within a window
  emailNotificationsEnabled Boolean   @default(true) // Allow users to disable email fallback

  @@index([userId])
}

model PushSubscription {
  id        String   @id @default(cuid()) @map("_id")
  userId    String   @db.ObjectId
  user      UserData @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  @@index([userId])
}

model ProviderAccount {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  userId               String  @unique @db.ObjectId
  type                 String
  provider             String
  providerAccountId    String
  refresh_token        String?
  access_token         String?
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        Json?
  credentials_password String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([provider, providerAccountId])
}

/// Represents a yoga Asana in the app.
model AsanaPose {
   // ‚ÄúFull‚Äù, Abbreviated Posture 1
  id                        String          @id @default(auto()) @map("_id") @db.ObjectId
  sort_english_name         String          @unique // ‚ÄúFull‚Äù, Abbreviated Posture 1, Unique name for pose, expected in English
  sanskrit_names            String[] // ‚ÄúFull‚Äù, Abbreviated Posture 1 // use first element for primary sanskrit name
  english_names             String[] // ‚ÄúFull‚Äù, Abbreviated Posture 1
  alternative_english_names String[] // ‚ÄúFull‚Äù, Abbreviated Posture 1
  poseImages                PoseImage[] // ‚ÄúFull‚Äù, Abbreviated Posture 1 // Relation to PoseImage, string to array
  description               String? // ‚ÄúFull‚Äù, Abbreviated Posture 1
  category                  String? // ‚ÄúFull‚Äù, Abbreviated Posture 1
  difficulty                String? // ‚ÄúFull‚Äù, Abbreviated Posture 1
  activity_completed        Boolean? // ‚ÄúFull‚Äù, Abbreviated Posture 1
  asanaActivities           AsanaActivity[] // ‚ÄúFull‚Äù, Abbreviated Posture 1 // Relation to AsanaActivity
  activity_practice         Boolean? // ‚ÄúFull‚Äù, Abbreviated Posture 1
  dristi                    String? // ‚ÄúFull‚Äù, Abbreviated Posture 1
  setup_cues                String? // ‚ÄúFull‚Äù, Abbreviated Posture 1
  deepening_cues            String? // ‚ÄúFull‚Äù, Abbreviated Posture 1
  // ‚ÄúAdvance‚Äù, Abbreviated Posture 2
  alignment_cues      String? // ‚ÄúAdvance‚Äù, Abbreviated Posture 2, string & boolean to string
  joint_action        String? // ‚ÄúAdvance‚Äù, Abbreviated Posture 2
  muscle_action       String? // ‚ÄúAdvance‚Äù, Abbreviated Posture 2
  transition_cues_out String? // ‚ÄúAdvance‚Äù, Abbreviated Posture 2
  transition_cues_in  String? // ‚ÄúAdvance‚Äù, Abbreviated Posture 2
  additional_cues     String? // ‚ÄúAdvance‚Äù, Abbreviated Posture 2
  benefits            String? // ‚ÄúAdvance‚Äù, Abbreviated Posture 2
  customize_asana     String? // ‚ÄúAdvance‚Äù, Abbreviated Posture 2
  // ‚ÄúPersonal‚Äù, Abbreviated Posture 3
  pose_modifications String[] // ‚ÄúPersonal‚Äù, Abbreviated Posture 3
  pose_variations    String[] // ‚ÄúPersonal‚Äù, Abbreviated Posture 3
  breath             String[] // ‚ÄúPersonal‚Äù, Abbreviated Posture 3, string & array to array
  duration_asana     String? // ‚ÄúPersonal‚Äù, Abbreviated Posture 3
  lore               String? // ‚ÄúPersonal‚Äù, Abbreviated Posture 3
  asana_intention    String? // ‚ÄúPersonal‚Äù, Abbreviated Posture 3

  label                String? // verify how it is used
  suggested_postures   String[] // verify how it is used
  preparatory_postures String[] // verify how it is used
  isUserCreated        Boolean   @default(false) // verify how it is used, don't think it is needed // Flag to identify user-created asanas
  created_on           DateTime? @default(now()) // Necessary
  updated_on           DateTime? @updatedAt // Necessary
  created_by           String? // Necessary // Should be the user email address.
  imageCount           Int       @default(0) // verify how it is used // Cache for number of images (performance optimization)
}

model AsanaSeries {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  seriesName     String
  seriesPostures String[]
  breathSeries   String[]
  description    String?
  durationSeries String?
  image          String? // Legacy single image field - kept for backward compatibility
  images         String[]  @default([]) // Multiple image URLs for the series
  created_by     String
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
}

model AsanaSequence {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  nameSequence     String
  sequencesSeries  Json[]
  description      String?
  durationSequence String?
  image            String?
  breath_direction String?
  created_by       String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
}

/// Records a user's daily asana activity.
model AsanaActivity {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  poseId            String   @db.ObjectId // Reference to AsanaPose.id
  postureName       String // e.g., Adho Mukha Svanasana
  sort_english_name String // For routing - e.g., "Downward Facing Dog"
  duration          Int // Duration held (in seconds)
  datePerformed     DateTime // Date performed
  notes             String? // User notes (optional)
  sensations        String? // Body sensations or mood (optional)
  completionStatus  String // e.g., "complete", "skipped", "partial"
  difficulty        String? // User-selected difficulty: "easy", "average", "difficult"
  user UserData  @relation(fields: [userId], references: [id], onDelete: Cascade)
  pose AsanaPose @relation(fields: [poseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Records a user's series practice activity.
model SeriesActivity {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  seriesId         String // Reference to AsanaSeries.id
  seriesName       String // e.g., "Sun Salutation A"
  datePerformed    DateTime // Date performed
  difficulty       String? // User-selected difficulty: "easy", "average", "difficult"
  completionStatus String   @default("complete") // e.g., "complete", "skipped", "partial"
  duration         Int      @default(0) // Duration in seconds
  notes            String? // User notes (optional)

  user UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Records a user's sequence practice activity.
model SequenceActivity {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  sequenceId       String // Reference to AsanaSequence.id
  sequenceName     String // e.g., "Morning Flow"
  datePerformed    DateTime // Date performed
  difficulty       String? // User-selected difficulty: "easy", "average", "difficult"
  completionStatus String   @default("complete") // e.g., "complete", "skipped", "partial"
  duration         Int      @default(0) // Duration in seconds
  notes            String? // User notes (optional)

  user UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Records user login events for activity streak calculation.
model UserLogin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  loginDate DateTime @default(now())
  ipAddress String? // Optional for analytics
  userAgent String? // Optional for analytics
  provider  String? // e.g., "google", "github", "credentials"

  user UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId, loginDate])
}

/// Records user-uploaded images of yoga poses.
model PoseImage {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @db.ObjectId
  postureId      String?     @db.ObjectId // Optional association with a specific posture
  postureName    String? // Store the sort_english_name for easier querying
  url            String // Image URL (Vercel Blob or local reference)
  altText        String? // Alternative text for accessibility
  fileName       String? // Original filename
  fileSize       Int? // File size in bytes
  uploadedAt     DateTime    @default(now())
  storageType    StorageType @default(CLOUD) // Where the image is stored
  localStorageId String? // Local storage identifier for browser storage
  isOffline      Boolean     @default(false) // True if saved offline due to API failure
  imageType      String      @default("posture") // 'profile', 'posture', 'gallery', etc.
  displayOrder   Int         @default(1) // Order for carousel display (1-3)

  user UserData   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pose AsanaPose? @relation(fields: [postureId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postureId])
  @@index([postureName])
  @@index([storageType])
  @@index([imageType])
  @@index([postureId, displayOrder]) // Composite index for efficient carousel queries
}

/// Enum for image storage types
enum StorageType {
  CLOUD // Stored in Vercel Blob
  LOCAL // Stored locally in browser storage
  HYBRID // Has both cloud and local copies
}

model GlossaryTerm {
  id            String         @id @default(cuid()) @map("_id")
  term          String         @unique
  meaning       String
  whyMatters    String
  category      String? // e.g. foundational, breath, meditation
  sanskrit      String? // Sanskrit representation with diacritics
  pronunciation String? // Phonetic guide for accessibility
  source        GlossarySource @default(DEFAULT)
  userId        String?        @db.ObjectId // Owner when source = USER
  readOnly      Boolean        @default(false) // Prevent edits for default seeded terms
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user UserData? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([source])
  @@index([userId])
}

enum GlossarySource {
  DEFAULT // Bundled with app
  ALPHA_USER // Contributed by approved alpha users
  USER // Regular user-created term
}
